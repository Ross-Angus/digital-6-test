<!-- start blog-filter -->
{{ 'blog-filter.css' | asset_url | stylesheet_tag }}

<form class="grid grid--2-col-desktop-down">
  {% comment %}
  <p><textarea cols="150" rows="50">{{ articles | json }}</textarea></p>
  {% endcomment %}
  <p class="grid__item">
    Filter:
    {% comment %} Building up an Array of article years {% endcomment %}
    {% assign validYears = '' %}
    {% assign allTags = '' %}
    {% assign associatedProducts = '' %}
    {% assign delimiter = ';' %}

    {%- for article in articles -%}
      {% assign thisPostDateArray = article.published_at | split: '-' %}
      {% assign thisPostYear = thisPostDateArray[0] %}
      {% assign associatedProductID = article.metafields.custom.associated_product | remove: 'gid://shopify/Product/' %}

      {% comment %} Only adding a new date if it doesn't already appear in the variable {% endcomment %}
      {% unless validYears contains thisPostYear %}
        {% assign validYears = validYears | append: thisPostYear | append: delimiter %}
      {% endunless %}

      {% comment %} Tags are naturally an Array. We need to loop through each tag on each article and
      see if it appears in the master list of tags common to all articles {% endcomment %}
      {% for tag in article.tags %}
        {% unless allTags contains tag %}
          {% assign allTags = allTags | append: tag | append: delimiter %}
        {% endunless %}
      {% endfor %}

      {% comment %} A single product may or may not be associated with blog posts, via metadata {% endcomment %}
      {% if associatedProductID != blank %}
        {% comment %} Add this ID to the master list, unless it's already there {% endcomment %}
        {% unless associatedProducts contains associatedProductID %}
          {% assign associatedProducts = associatedProducts | append: associatedProductID | append: delimiter %}
        {% endunless %}
      {% endif %}

    {%- endfor -%}

    {% comment %} Only render the date filter if there is a year to display {% endcomment %}
    {% if validYears != blank %}
      {% assign yearsArray = validYears | split: delimiter %}
      <label for="year-posted" class="visually-hidden">Date posted</label>
      <select name="year-posted" id="year-posted" class="select-bodytext" data-js="year-sort">
        <option value="" selected="selected">Year posted</option>
        {%- for year in yearsArray -%}
          <option>{{ year }}</option>
        {%- endfor -%}
      </select>
    {% endif %}

    {% comment %} Only render the tag filter if there are any tags {% endcomment %}
    {% if allTags != blank %}
      {% comment %} Pulling the current filtered tag from the URL {% endcomment %}
      {% assign tagURL = canonical_url | split: '/tagged/' %}

      {% assign tagArray = allTags | split: delimiter | sort %}
      <label for="tags" class="visually-hidden">Tags</label>
      <select name="tags" id="tags" class="select-bodytext" data-js="select-redirect">
        <option value="">Tags</option>
        {%- for tag in tagArray -%}
          {% assign tagHandle = tag | handleize %}
          <option value="/blogs/{{ blog.handle }}/tagged/{{ tag | handleize }}"
            {%- if tagURL[1] contains tagHandle %} selected="selected"{%- endif -%}
          >{{ tag }}</option>
        {%- endfor -%}
      </select>
    {% endif %}

    {% comment %} Only render the product filter if there are any products to show {% endcomment %}
    {% if associatedProducts != blank %}
      {% assign associatedProductsArray = associatedProducts | split: delimiter %}
      <label for="associated-products" class="visually-hidden">Associated products</label>
      <select name="associated-products" id="associated-products" class="select-bodytext" data-js="prod-sort">
        <option value="" selected="selected">Associated products</option>
        {%- for productID in associatedProductsArray -%}
          {% comment %} This looks, on the face of it, an absolutely insane
          method to get product data back, if you have a product ID.
          Unfortunately, Shopify disagrees with you. {% endcomment %}
          {% for product in collections.all.products %}
            {% comment %} Type conversion, because it wouldn't work otherwise {% endcomment %}
            {% assign loopID = product.id | plus: 0 %}
            {% assign loopcheckID = productID | plus: 0 %}

            {% if loopID == loopcheckID %}
              <option value="{{ productID }}">{{ product.title }}</option>
            {% endif %}
          {% endfor %}
        {%- endfor -%}
      </select>
    {% endif %}
  </p>

  {% comment %} I chose not to implement this functionality because
  Shopify does not provide any native way to do this. The work-around
  is to pull in all articles as JSON data and then manipulate and
  render them using JavaScript. This approach breaks many of the
  benefits of Webstore 2.0 and is a significat feature to build. {% endcomment %}
  <p class="grid__item right">
    <label for="sort-type">Sort by</label>
    <select id="sort-type" name="sort-type" class="select-bodytext">
      <option value="new-old">Most recent</option>
      <option value="new-old">Chronological order</option>
    </select>
    <span data-js="article-count"></span>
  </p>

</form>

{% comment %} For reasons known only to the Liquid parsing engine, all of the documented
methods of adding JavaScript to a snippet refused to work. The only way to get JS to
appear is to use a traditional `script` tag. {% endcomment %}
<script>
  (() => {

    // Updates the markup which lists how many articles are visible
    const countUpdate = () => {
      // Count the visible articles
      const blogContainer = document.querySelector('[data-js="article-container"]');
      const visibleCTACount = blogContainer.querySelectorAll('.blog-articles__article:not(.visually-hidden)').length;

      // Update the markup
      const articleInfo = document.querySelectorAll('[data-js="article-count"]');
      articleInfo.forEach((tag) => {
        tag.innerHTML = `${visibleCTACount} article${visibleCTACount === 1 ? '' : 's'}`;
      });
    };

    document.addEventListener("blog-listing-updated", () => {
      countUpdate();
    });

    // This function takes two parameters:
    // The attribute name
    // The attribute value
    // It then hides all blog posts apart from the ones which match the name / value
    // pair passed as a parameter.
    const filterBlog = (attr, value) => {
      const blogContainer = document.querySelector('[data-js="article-container"]');
      const ctas = Array.from(blogContainer.children);
      const loadMoreBtn = document.querySelector('[data-js="load-more"]');

      ctas.forEach((cta) => {
        const wrap = cta.querySelector('.article-card-wrapper');
        if (wrap.getAttribute(attr) === value) {
          cta.classList.remove('visually-hidden');
        } else {
          cta.classList.add('visually-hidden');
        }

        // Update the count
        let updateEvent = new Event("blog-listing-updated");
        document.dispatchEvent(updateEvent);

        // Hide the "Load more" button
        loadMoreBtn.classList.add('visually-hidden');
      });
    };

    {% comment %} This function redirects the current page to a URL which is part of the `name`
    attribute of the current input. Tested on `select`.{% endcomment %}
    const selectRedirect = document.querySelectorAll('[data-js="select-redirect"]');
    selectRedirect.forEach((select) => {
      select.addEventListener("change", (event) => {
        window.location.replace(event.target.value);
      });
    });

    {% comment %} The user has selected a year and wants to display all blog posts which match it
    {% endcomment %}
    const selectYear = document.querySelector('[data-js="year-sort"]');
    if (selectYear) {
      selectYear.addEventListener("change", (event) => {
        const yearChoice = event.target.value;
        if (yearChoice !== '') {
          filterBlog('data-pubyear', yearChoice);
          // Reset the other select box
          selectProd.selectedIndex = 0;
        }
      });
    }

    {% comment %} The user has selected a product and wants to display all blog posts which match it
    {% endcomment %}
    const selectProd = document.querySelector('[data-js="prod-sort"]');
    if (selectProd) {
      selectProd.addEventListener("change", (event) => {
        const prodChoice = event.target.value;
        if (prodChoice !== '') {
          filterBlog('data-prod-id', prodChoice);
          // Reset the other select box
          selectYear.selectedIndex = 0;
        }
      });
    }

  })();
</script>

<!-- end blog-filter -->